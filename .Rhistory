legend.title = element_text(size = 16),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(color="#666666", face="bold", size=20, hjust=0)
) +
facet_wrap(~ Lib_ID)
fams %>%
dplyr::filter(Lib_ID %in% libs2$V1) -> temp
temp %>%
group_by(var_id, Lib_ID) %>%
plyr::summarize(fam_n = n(), alt_reads=sum(alt_counts), mean_fsize=mean(fam_size), med_fsize=median(fam_size), sd_fsize = sd(fam_size)) %>%
dplyr::filter(fam_n > 0) -> tempsum
fams %>%
dplyr::filter(Lib_ID %in% libs2$V1) -> temp
temp %>%
group_by(var_id, Lib_ID) %>%
dplyr::summarize(fam_n = n(), alt_reads=sum(alt_counts), mean_fsize=mean(fam_size), med_fsize=median(fam_size), sd_fsize = sd(fam_size)) %>%
dplyr::filter(fam_n > 0) -> tempsum
temp %>%
dplyr::filter(var_id %in% tempsum$var_id) -> temp2
ggplot(temp2, aes(x = fam_size)) +
geom_histogram(binwidth = 1, colour = "black", fill = "blue") +
xlim(0, 90) +
ylim(0, 600) +
xlab("Variant Fam Size") + ylab("Counts") +
ggtitle("") +
theme_bw() +
theme(axis.title = element_text(size = "16"),
panel.grid.minor = element_blank(),
axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.3),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 18),
legend.title = element_text(size = 16),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(color="#666666", face="bold", size=20, hjust=0)
) +
facet_wrap(~ Lib_ID)
facet_wrap(~ Lib_ID, ncol = 6)
ggplot(temp2, aes(x = fam_size)) +
geom_histogram(binwidth = 1, colour = "black", fill = "blue") +
xlim(0, 90) +
ylim(0, 600) +
xlab("Variant Fam Size") + ylab("Counts") +
ggtitle("") +
theme_bw() +
theme(axis.title = element_text(size = "16"),
panel.grid.minor = element_blank(),
axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.3),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 18),
legend.title = element_text(size = 16),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(color="#666666", face="bold", size=20, hjust=0)
) +
facet_wrap(~ Lib_ID, ncol = 6)
ggplot(temp2, aes(x = fam_size)) +
geom_histogram(binwidth = 1, colour = "black", fill = "blue") +
xlim(0, 150) +
ylim(0, 800) +
xlab("Variant Fam Size") + ylab("Counts") +
ggtitle("") +
theme_bw() +
theme(axis.title = element_text(size = "16"),
panel.grid.minor = element_blank(),
axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.3),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 18),
legend.title = element_text(size = 16),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(color="#666666", face="bold", size=20, hjust=0)
) +
facet_wrap(~ Lib_ID, ncol = 6)
fams %>%
dplyr::filter(Lib_ID %in% libs2$V1) -> temp
temp %>%
group_by(var_id, Lib_ID) %>%
dplyr::summarize(fam_n = n(), alt_reads=sum(alt_counts), mean_fsize=mean(fam_size), med_fsize=median(fam_size), sd_fsize = sd(fam_size)) %>%
dplyr::filter(fam_n > 2) -> tempsum
temp %>%
dplyr::filter(var_id %in% tempsum$var_id) -> temp2
ggplot(temp2, aes(x = fam_size)) +
geom_histogram(binwidth = 1, colour = "black", fill = "blue") +
xlim(0, 90) +
ylim(0, 600) +
xlab("Variant Fam Size") + ylab("Counts") +
ggtitle("") +
theme_bw() +
theme(axis.title = element_text(size = "16"),
panel.grid.minor = element_blank(),
axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.3),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 18),
legend.title = element_text(size = 16),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(color="#666666", face="bold", size=20, hjust=0)
) +
facet_wrap(~ Lib_ID, ncol = 6)
libs3<-read.table('clipboard', sep="\t", header=F)
libs3<-read.table('clipboard', sep="\t", header=F)
fams %>%
dplyr::filter(Lib_ID %in% libs2$V1) -> temp
temp %>%
group_by(var_id, Lib_ID) %>%
dplyr::summarize(fam_n = n(), alt_reads=sum(alt_counts), mean_fsize=mean(fam_size), med_fsize=median(fam_size), sd_fsize = sd(fam_size)) %>%
dplyr::filter(fam_n > 1) -> tempsum
temp %>%
dplyr::filter(var_id %in% tempsum$var_id) -> temp2
ggplot(temp2, aes(x = fam_size)) +
geom_histogram(binwidth = 1, colour = "black", fill = "blue") +
xlim(0, 90) +
ylim(0, 600) +
xlab("Variant Fam Size") + ylab("Counts") +
ggtitle("") +
theme_bw() +
theme(axis.title = element_text(size = "16"),
panel.grid.minor = element_blank(),
axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.3),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 18),
legend.title = element_text(size = 16),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(color="#666666", face="bold", size=20, hjust=0)
) +
facet_wrap(~ Lib_ID, ncol = 6)
fams %>%
dplyr::filter(Lib_ID %in% libs3$V1) -> temp
temp %>%
group_by(var_id, Lib_ID) %>%
dplyr::summarize(fam_n = n(), alt_reads=sum(alt_counts), mean_fsize=mean(fam_size), med_fsize=median(fam_size), sd_fsize = sd(fam_size)) %>%
dplyr::filter(fam_n > 1) -> tempsum
temp %>%
dplyr::filter(var_id %in% tempsum$var_id) -> temp2
ggplot(temp2, aes(x = fam_size)) +
geom_histogram(binwidth = 1, colour = "black", fill = "blue") +
xlim(0, 90) +
ylim(0, 600) +
xlab("Variant Fam Size") + ylab("Counts") +
ggtitle("") +
theme_bw() +
theme(axis.title = element_text(size = "16"),
panel.grid.minor = element_blank(),
axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.3),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 18),
legend.title = element_text(size = 16),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(color="#666666", face="bold", size=20, hjust=0)
) +
facet_wrap(~ Lib_ID, ncol = 6)
fams %>%
dplyr::filter(Lib_ID %in% libs3$V1) -> temp
temp %>%
group_by(var_id, Lib_ID) %>%
dplyr::summarize(fam_n = n(), alt_reads=sum(alt_counts), mean_fsize=mean(fam_size), med_fsize=median(fam_size), sd_fsize = sd(fam_size)) %>%
dplyr::filter(fam_n > 1) -> tempsum
temp %>%
dplyr::filter(var_id %in% tempsum$var_id) -> temp2
ggplot(temp2, aes(x = fam_size)) +
geom_histogram(binwidth = 1, colour = "black", fill = "blue") +
xlim(0, 120) +
ylim(0, 500) +
xlab("Variant Fam Size") + ylab("Counts") +
ggtitle("") +
theme_bw() +
theme(axis.title = element_text(size = "16"),
panel.grid.minor = element_blank(),
axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.3),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 18),
legend.title = element_text(size = 16),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(color="#666666", face="bold", size=20, hjust=0)
) +
facet_wrap(~ Lib_ID, ncol = 6)
fams %>%
dplyr::filter(Lib_ID %in% libs3$V1) -> temp
temp %>%
group_by(var_id, Lib_ID) %>%
dplyr::summarize(fam_n = n(), alt_reads=sum(alt_counts), mean_fsize=mean(fam_size), med_fsize=median(fam_size), sd_fsize = sd(fam_size)) %>%
dplyr::filter(fam_n > 1) -> tempsum
temp %>%
dplyr::filter(var_id %in% tempsum$var_id) -> temp2
ggplot(temp2, aes(x = fam_size)) +
geom_histogram(binwidth = 1, colour = "black", fill = "blue") +
xlim(0, 100) +
ylim(0, 500) +
xlab("Variant Fam Size") + ylab("Counts") +
ggtitle("") +
theme_bw() +
theme(axis.title = element_text(size = "16"),
panel.grid.minor = element_blank(),
axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.3),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 18),
legend.title = element_text(size = 16),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(color="#666666", face="bold", size=20, hjust=0)
) +
facet_wrap(~ Lib_ID, ncol = 6)
fams %>%
dplyr::filter(Lib_ID %in% libs3$V1) -> temp
temp %>%
group_by(var_id, Lib_ID) %>%
dplyr::summarize(fam_n = n(), alt_reads=sum(alt_counts), mean_fsize=mean(fam_size), med_fsize=median(fam_size), sd_fsize = sd(fam_size)) %>%
dplyr::filter(fam_n > 1) -> tempsum
temp %>%
dplyr::filter(var_id %in% tempsum$var_id) -> temp2
ggplot(temp2, aes(x = fam_size)) +
geom_histogram(binwidth = 1, colour = "black", fill = "blue") +
xlim(0, 80) +
ylim(0, 500) +
xlab("Variant Fam Size") + ylab("Counts") +
ggtitle("") +
theme_bw() +
theme(axis.title = element_text(size = "16"),
panel.grid.minor = element_blank(),
axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.3),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 18),
legend.title = element_text(size = 16),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(color="#666666", face="bold", size=20, hjust=0)
) +
facet_wrap(~ Lib_ID, ncol = 6)
shiny::runApp('C:/Users/RC3258/Google Drive/Thermo/Projects/2015-4-15_Molecular_indexing/shiny_app/watson_v5.21')
library(BSgenome)
library(BiocInstaller)
biocLite("BSgenome.Hsapiens.UCSC.hg19")
installed.genomes()
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
View(x)
set.seed(7)
library(dplyr)
library(ggplot2)
library(rpart)
library(rpart.plot)
df <- read.csv("../data.csv")
set.seed(7)
library(dplyr)
library(ggplot2)
library(rpart)
library(rpart.plot)
df <- read.csv("./data.csv")
getwd()
set.seed(7)
library(dplyr)
library(ggplot2)
library(rpart)
library(rpart.plot)
df <- read.csv("../GitRepo/wisconsin/data.csv")
set.seed(7)
library(dplyr)
library(ggplot2)
library(rpart)
library(rpart.plot)
df <- read.csv("./GitRepo/wisconsin/data.csv")
# take 70% to train
index <- sample(1:nrow(df),size = 0.7*nrow(df))
train <- df[index, ]
test <- df[-index, ]
View(test)
View(train)
View(test)
head(test)
library(caet)
library(caret)
# prepare training scheme
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the LVQ model
modelLvq <- train(diagnosis~., data=train, method="lvq", trControl=control)
# train the GBM model
modelGbm <- train(diagnosis~., data=train, method="gbm", trControl=control, verbose=FALSE)
# train the SVM model
modelSvm <- train(diagnosis~., data=train, method="svmRadial", trControl=control)
# collect resamples
results <- resamples(list(LVQ=modelLvq, GBM=modelGbm, SVM=modelSvm))
# summarize the distributions
View(test)
df$id< -NULL
df$M <- ULL
df$id< -NULL
df$M <- NULL
class(df$M)
View(df)
df <- df %>%
select(-id, -M)
df <- df %>%
select(-id, -X)
index <- sample(1:nrow(df),size = 0.7*nrow(df))
train <- df[index, ]
test <- df[-index, ]
# prepare training scheme
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the LVQ model
modelLvq <- train(diagnosis~., data=train, method="lvq", trControl=control)
# train the GBM model
modelGbm <- train(diagnosis~., data=train, method="gbm", trControl=control, verbose=FALSE)
# prepare training scheme
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the LVQ model
modelLvq <- train(diagnosis~., data=train, method="lvq", trControl=control)
# train the GBM model
modelGbm <- train(diagnosis~., data=train, method="gbm", trControl=control, verbose=FALSE)
# train the SVM model
modelSvm <- train(diagnosis~., data=train, method="svmRadial", trControl=control)
results <- resamples(list(LVQ=modelLvq, GBM=modelGbm, SVM=modelSvm))
results
summary(results)
# boxplots of results
bwplot(results)
# dot plots of results
dotplot(results)
m.rf <- train(diagnosis~., data=train, method="rf", trControl=control)
m.rf <- train(diagnosis~., data=train, method="rf", trControl=control)
m.glm <- train(diagnosis~., data=train, method="glm", trControl=control)
summary(m.rf)
results <- resamples(list(glm=m.glm, LVQ=m.lvq, GBM=mm.gbm, SVM=m.svm, rf=m.rf))
# train linear model
m.glm <- train(diagnosis~., data=train, method="glm", trControl=control)
# train LVQ model
m.lvq <- train(diagnosis~., data=train, method="lvq", trControl=control)
# train GBM model
m.gbm <- train(diagnosis~., data=train, method="gbm", trControl=control, verbose=FALSE)
# train SVM model
m.svm <- train(diagnosis~., data=train, method="svmRadial", trControl=control)
# train rf model
m.rf <- train(diagnosis~., data=train, method="rf", trControl=control)
# collect resamples
results <- resamples(list(glm=m.glm, LVQ=m.lvq, GBM=mm.gbm, SVM=m.svm, rf=m.rf))
results <- resamples(list(glm=m.glm, LVQ=m.lvq, GBM=m.gbm, SVM=m.svm, rf=m.rf))
# summarize the distributions
summary(results)
# boxplots of results
bwplot(results)
# dot plots of results
dotplot(results)
```
pred.svm <- predict(m.svm, test, type = "prob")
pred.svm <- predict(m.svm, test, type = "class")
View(test)
pred.svm <- predict(m.svm, test)
confusionMatrix(pred.svm, test$diagnosis)
set.seed(7)
library(dplyr)
library(ggplot2)
library(caret)
df <- read.csv("./data.csv")
# delete id and X columns
df <- df %>%
select(-id, -X)
set.seed(7)
library(dplyr)
library(ggplot2)
library(caret)
df <- read.csv("../data.csv")
# delete id and X columns
df <- df %>%
select(-id, -X)
getwd()
getwd()
setwd("C:/Users/RC3258/Documents/GitRepo/ds_wisconsin-bc")
set.seed(7)
library(dplyr)
library(ggplot2)
library(caret)
df <- read.csv("./data.csv")
# delete id and X columns
df <- df %>%
select(-id, -X)
# take random 70% to train
index <- sample(1:nrow(df),size = 0.7*nrow(df))
train <- df[index, ]
test <- df[-index, ]
# prepare training control
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train linear model
m.glm <- train(diagnosis~., data=train, method="glm", trControl=control)
# train LVQ model
m.lvq <- train(diagnosis~., data=train, method="lvq", trControl=control)
# train GBM model
m.gbm <- train(diagnosis~., data=train, method="gbm", trControl=control, verbose=FALSE)
# train SVM model
m.svm <- train(diagnosis~., data=train, method="svmRadial", trControl=control)
# train rf model
m.rf <- train(diagnosis~., data=train, method="rf", trControl=control)
# collect resamples
results <- resamples(list(glm=m.glm, lvq=m.lvq, gbm=m.gbm, svm=m.svm, rf=m.rf))
# summarize
summary(results)
bwplot(results)
dotplot(results)
bwplot(results)
bwplot(results, metric="ROC")
result
results$
results
results$values
score <- function(model,target=data[testInd, 21],predict=pr){
results.test <- table(target,predict,dnn=c("Actual", "Predicted"))
pct.test.correct <- round(100 * sum(diag(results.test)) / sum(results.test),2)
results <- list(results.test,pct.test.correct)
(results)
}
pred.svm <- predict(m.svm, test)
# confusion matrix
confusionMatrix(pred.svm, test$diagnosis)
table((pred.svm, test$diagnosis))
table(pred.svm, test$diagnosis)
res <- table(pred.svm, test$diagnosis)
res
diag(res)/sum(res)
sum(diag(res))/sum(res)
round(100 * sum(diag(res))/sum(res), 2)
ctrl <- trainctrl(method="repeatedcv", number=10,
repeats=3, summaryFunction=twoClassSummary)
ctrl <- trainControl(method="repeatedcv", number=10,
repeats=3, summaryFunction=twoClassSummary)
registerDoParallel(4,cores=2)
m.gbm <- train(diagnosis~., data=train, method="gbm",
metric="ROC", trControl=ctrl)
ctrl <- trainControl(method="repeatedcv", number=10,
repeats=3, summaryFunction=twoClassSummary, classProbs=T)
m.gbm <- train(diagnosis~., data=train, method="gbm",
metric="ROC", trControl=ctrl)
m.gbm$bestTune
plot(m.gbm)
m.gbm$results
pred.gbm <- predict(m.gbm, test)
confusionMatrix(pred.svm, test$diagnosis)
performance
library(ROCR)
install.packages("ROCR")
library(ROCR)
performance
pred<-prediction(pred.gbm, test$diagnosis)
pred<-prediction(abs(pred.gbm), test$diagnosis)
class(pred.gbm)
pred.gbm
pred.gbm.prob <- predict(m.gbm, test, type="prob")
pred.gbm.prob
pred.gbm.prob$PS
head(pred.gbm.prob)
library(pROC)
pred.gbm.prob <- predict(m.gbm, test, type="response")
pred.gbm.prob <- predict(m.gbm, test, type="prob")
pred.gbm.prob
pred.gbm.prob[[2]]
pred.gbm.prob
head(pred.gbm.prob)
auc <- roc(ifelse(test[,diagnosis]=="M",1,0), pred.gbm.prob[[2]])
head(test)
test$diagnosis
